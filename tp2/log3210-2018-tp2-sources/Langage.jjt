options {
    JAVA_UNICODE_ESCAPE = true;
    STATIC = false;
    MULTI = true;
    VISITOR = true;
}

PARSER_BEGIN(Parser)

package analyzer.ast;

public class Parser
{
    public static ASTProgram parseTree(java.io.InputStream input) throws ParseException
    {
        Parser exo = new Parser(input);
        return exo.Program();
    }
}

PARSER_END(Parser)


//
// ANALYSE LEXICALE
//

// Sauter les blancs
SKIP :
{
    < ( " " | "\t" | "\n" | "\r" )+	>
}

// Commentaires
MORE :
{
    "//" : IN_SINGLE_LINE_COMMENT |
    <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT |
    "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
    <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
    <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
    <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
    < ~[] >
}

// Mots-clés
TOKEN :
{
    <IF: "if" > |
    <ELSE: "else" > |
    <WHILE: "while" > |
    <FOR: "for" > |
    <TYPE: <STR> | <INT> | <FLOAT> | <BOOL> > |
    < #STR: "string"> |
    < #INT: "int"> |
    < #FLOAT: "float" > |
    < #BOOL: "bool"> |
    <PRINT: "print" > |
    <INPUT: "input" >
}

// Opérateurs
TOKEN :
{
    // Opérateurs d'assignation
    <ASSIGN: <EQUAL> | <PLUSEQUAL> | <MINUSEQUAL> | <POWEQUAL> | <DIVEQUAL> | <FOISEQUAL> > |
    < #EQUAL: "=" > |
    < #PLUSEQUAL: "+=" > |
    < #MINUSEQUAL: "-=" > |
    < #POWEQUAL: "^=" > |
    < #DIVEQUAL: "/=" > |
    < #FOISEQUAL: "*=" > |

    // Opérateurs de comparaison
    <COMPARE: <LESS> | <LESSEQUAL> | <GREAT> | <GREATEQUAL> | <DIFF> | <EQUALEQUAL> > |
    < #LESS: "<" > |
    < #LESSEQUAL: "<=" > |
    < #GREAT: ">" > |
    < #GREATEQUAL: ">=" > |
    < #DIFF: "!=" > |
    < #EQUALEQUAL: "==" > |

    // Opérateurs logiques
    <AND: "&&"  > |
    <OR:  "||"  > |
    <NOT: "not" > |

    // Opérateurs arithmétiques
    <PLUS:  "+" > |
    <MINUS: "-" > |
    <TIMES: "*" > |
    <DIV:   "/" > |
    <POW:   "^" > |

    // Signes de ponctuation
    < LPAREN: "(" > |
    < RPAREN: ")" > |
    < LACC: "{" > |
    < RACC: "}" > |
    < COLON: ":" > |
    < SEMICOLON: ";" > |
    < COMMA: "," >
}

// Identificateurs et nombres
TOKEN :
{
    < IDENTIFIER: <LETTER> ( <LETTER> | <DIGIT> )* > |
    < #LETTER: ["a"-"z","A"-"Z","_"] > |
    < #DIGIT: ["0"-"9"] > |
    < INTEGER: ["1"-"9"] (["0"-"9"])* | "0" > |
    // Caution! Allows numbers such as "0000.23"
    < REAL: (<INTEGER>)+ "." (["0"-"9"])+ (<EXPONENT>)? |
            (<INTEGER>)+ <EXPONENT> > |
    < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ > |
    < STRING: "\"" ( <LETTER> | <DIGIT> )* "\"" >
}


//
// ANALYSE SYNTAXIQUE
//

ASTProgram Program() : {}
{

    Block() <EOF> { return jjtThis; }
}

void Block() : {}
{
     ( Stmt() )*
}

void Stmt() : {}
{
    AssignStmt() <SEMICOLON>
}



void AssignStmt() :
{
    Token t;
}
{
    (
        Identifier() t = <ASSIGN>
        {
            jjtThis.addOp(t.image);
        }
    ) AddExpr()
}



void AddExpr() :
{
    Token t;
}
{
    MultExpr()
    (
        (t = <PLUS> | t = <MINUS>) MultExpr()
        {
            jjtThis.addOp(t.image);
        }
    )*
}

void MultExpr() :
{
    Token t;
}
{
    UnaryOpExpr()
    (
        (t = <TIMES>) UnaryOpExpr()
        {
            jjtThis.addOp(t.image);
        }
    )*
}



void UnaryOpExpr() :
{
    Token t;
}
{
    (
        (t = <MINUS> | t = <NOT>)
        {
            jjtThis.addOp(t.image);
        }
    )*
    BasicExpr()
}

void BasicExpr() : {}
{
    Identifier() |
    IntValue() |
    <LPAREN> AddExpr() <RPAREN>
}



void Identifier() :
{
    Token t;
}
{
    t = <IDENTIFIER> { jjtThis.setValue(t.image); }
}

void IntValue() :
{
    Token t;
}
{
    t = <INTEGER> { jjtThis.setValue(Integer.parseInt(t.image)); }
}


