package analyzer.ast;/* Generated By:JJTree: Do not edit this line. ASTMultExpr.java */

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Vector; // PLB

public class ASTMultExpr extends SimpleNode {
  public ASTMultExpr(int id) {
    super(id);
  }
  public ASTMultExpr(ASTMultExpr mExpr){super(mExpr.getId());}

  public ASTMultExpr(Parser p, int id) {
    super(p, id);
  }


  /** Accept the visitor. **/
  public Object jjtAccept(ParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }

 /* public ArrayList<String> reduce(){
      int val = 1;
      String[] identifiers = new String[12];
      for (int  i = 0 ; i<this.jjtGetNumChildren(); i++) {
          if (this.isStringInt(jjtGetChild(i).reduce()[i])){
                val *=Integer.parseInt(jjtGetChild(i).reduce()[i]);
          }
          else
    identifiers.add
}
      return val;
    }*/

    public ArrayList<String> reduce() {
        int val = 1;
        String leftStr= "", rightStr = "";
        boolean isLeftId, isRightId = false;
        int leftVal = 1, rightVal = 1;
        ArrayList<String> leftArray, rightArray = new ArrayList<>(), stringValues  = new ArrayList<>();

        ASTUnaryOpExpr tempNode = (ASTUnaryOpExpr) this.jjtGetChild(0);
        leftArray = tempNode.reduce();
        leftStr = hasIdentifier(leftArray); //TOCO right now single val falls in
        isLeftId = !leftStr.equals("");

        if(this.jjtGetNumChildren()>1){
            tempNode = (ASTUnaryOpExpr) this.jjtGetChild(1);
            rightArray = tempNode.reduce();
            rightStr = hasIdentifier(rightArray);
            isRightId = !rightStr.equals("");
        }

        if(this.jjtGetNumChildren() == 1){ // only left exists
            stringValues.addAll(leftArray); //only want to bubble up regular array. could be eg (7+a) ready to go with +5
            return stringValues;
        }


        else { // both sides
            // for(int i = 0; i<this.jjtGetNumChildren();i++){
            int value = 1;
            if (!isLeftId && this.isStringInt(leftArray.get(0))) {
                leftVal = Integer.parseInt(leftArray.get(0));
            }
            if (!isRightId && this.isStringInt(rightArray.get(0))) {
                rightVal = Integer.parseInt(rightArray.get(0));
            }

            //returns
            if (!isLeftId && !isRightId) {
                value = rightVal * leftVal;
                stringValues.add(Integer.toString(value));
            } else if (!isLeftId) { //left is num
                if (leftVal == 0) {
                    stringValues.add("0");
                } else {
                    if ( (leftVal == 1 && rightStr.length() == 0) || leftVal !=1)  {
                        stringValues.add(Integer.toString(leftVal));
                    }
                    if( rightStr.length() > 0 && leftVal !=1){
                        stringValues.add("*");
                    }
                    if ( rightStr.length() > 0) {
                        stringValues.add(rightStr);
                    }
                }
            } else if (!isRightId) {
                if (rightVal == 0) {
                    stringValues.add("0");
                } else {
                    if ( (rightVal == 1 && leftStr.length() == 0) || rightVal !=1){
                        stringValues.add(Integer.toString(rightVal));
                    }
                    if( leftStr.length() > 0 && rightVal !=1){
                        stringValues.add("*");
                    }
                    if ( leftStr.length() > 0) {
                        stringValues.add(leftStr);
                    }

                }
            } else {//both string
                stringValues.add(leftStr);
                stringValues.add("*");
                stringValues.add(rightStr);
            }
        }
        return stringValues;
    }

    private String hasIdentifier(ArrayList<String> array){
        String idString = "";
        boolean isStr = false;
        for (int r = 0; r < array.size(); r++) {
            if (!(array.get(r).equals("+") || array.get(r).equals("-") || array.get(r).equals("*"))) {
                if (!this.isStringInt(array.get(r))) {
                    isStr = true;
                }
            }
            idString += array.get(r);
        }
        if (!array.get(0).equals("(")) {
            idString = "(" + idString + ")";
        }
        if (!isStr) return "";

        return idString;
    }
    // PLB
  private Vector<String> m_ops = new Vector<>();
  public void addOp(String o) { m_ops.add(o); }
  public Vector getOps() { return m_ops; }
}
