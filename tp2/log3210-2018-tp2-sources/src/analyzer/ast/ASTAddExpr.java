package analyzer.ast;/* Generated By:JJTree: Do not edit this line. ASTAddExpr.java */

import java.util.ArrayList;
import java.util.Vector;	// PLB

public class ASTAddExpr extends SimpleNode {
  public ASTAddExpr(int id) {
    super(id);
  }
  public ASTAddExpr(){};
  public ASTAddExpr(ASTAddExpr addE){
      super(addE.getId());
      this.parser = addE.parser;
      this.children = addE.children;
      this.m_ops = addE.m_ops;
      this.parent = addE.parent;
  }
  public ASTAddExpr(Parser p, int id) {
    super(p, id);
  }


  /** Accept the visitor. **/
  public Object jjtAccept(ParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }


    /*public ArrayList<String> reduce(){
        int val = 1;
        ArrayList<String> identifiers = new ArrayList<>();
        int countMinus = 0;
        for (int  i = 0 ; i<this.jjtGetNumChildren(); i++) {

            ArrayList<String> currArray = jjtGetChild(i).reduce();

            for (int j = 0; j < currArray.size(); j++) {
                String current = currArray.get(j);
                if (this.isStringInt(current)) {
                    val *= Integer.parseInt(current);
                } else {
                    if (current.charAt(0) == '-') {
                        countMinus++; // remind val may be neg
                        current.substring(1);
                    }
                    if (!current.equals(""))
                        identifiers.add(current);
                }
            }
        }
        if(val < 0){
            countMinus ++;
            val *= -1;
        }
        ArrayList<String> ret = new ArrayList<>();
        if (val!=0) {
            if (countMinus%2 == 0)
                ret.add("-");
            ret.add(Integer.toString(val));
            ret.addAll(identifiers);
        }
        else ret.add("0");
        return ret;
    }*/

    @Override
    public ArrayList<String> reduce() {
        int val = 0;
        String op = "";
        String stringOp = "";


        for (int child = 0; child < this.jjtGetNumChildren(); child++) {

            if (jjtGetChild(child) instanceof ASTMultExpr) {
                ASTMultExpr tempNode = (ASTMultExpr)jjtGetChild(child);
                ArrayList<String> currArray = tempNode.reduce();


                for ( int inner = 0; inner < currArray.size(); inner ++){
                    if (currArray.get(inner).equals("+"));






                }



                /*
                if (op.equals("") && currArray.size() > 0) { // first item
                    if (this.isStringInt(currArray.get(0))) {
                        val = Integer.parseInt(currArray.get(0));
                    } else {
                        stringOp = currArray.get(0);
                    }

                }
                if (op.equals("+")) {
                    String temp = "";

                    if (this.isStringInt(currArray.get(0))) {
                        val += Integer.parseInt(currArray.get(0));
                    }
                    //else
                    else if(currArray.get(0).length()>0){
                        /*if (currArray.get(0).charAt(0) == '-') {

                        }*/
                        stringOp += op + currArray.get(0);
                    }


                }
                if (op.equals("-")) {
                    if (this.isStringInt(currArray.get(0))) {
                        val -= Integer.parseInt(currArray.get(0));
                    } else if(currArray.get(0).length()>0){
                        //else if (currArray.get(0).charAt(0) == '-') {
                        stringOp += op + currArray.get(0);
                    }
                }

                if (m_ops.size() > child) {
                    op = m_ops.get(child);//-, + ,""
                }

            }*/
        }
        if (val == 0 && stringOp.equals("")) {
            int finalVal = val;
            return new ArrayList<String>() {{
                Integer.toString(finalVal);
            }};
        }
        if(val!=0) {

            String answer = Integer.toString(val);
            if(stringOp.length()>0&& stringOp.charAt(0) != '+')
                answer += "+";
            answer += stringOp;
            String finalAnswer = answer;
            return new ArrayList<String>() {{
                add(finalAnswer);
            }};
        }
        else{
            String answer =  stringOp;
            return new ArrayList<String>() {{
                add(answer);
            }};
        }



    }

    // PLB
  private Vector<String> m_ops = new Vector<>();
  public void addOp(String o) { m_ops.add(o); }
  public Vector getOps() { return m_ops; }
}
