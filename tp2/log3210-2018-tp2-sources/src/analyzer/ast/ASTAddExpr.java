package analyzer.ast;/* Generated By:JJTree: Do not edit this line. ASTAddExpr.java */

import java.util.ArrayList;
import java.util.Vector;	// PLB

public class ASTAddExpr extends SimpleNode {
  public ASTAddExpr(int id) {
    super(id);
  }
  public ASTAddExpr(){};
  public ASTAddExpr(ASTAddExpr addE){
      super(addE.getId());
      this.parser = addE.parser;
      this.children = addE.children;
      this.m_ops = addE.m_ops;
      this.parent = addE.parent;
  }
  public ASTAddExpr(Parser p, int id) {
    super(p, id);
  }


  /** Accept the visitor. **/
  public Object jjtAccept(ParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }


    /*public ArrayList<String> reduce(){
        int val = 1;
        ArrayList<String> identifiers = new ArrayList<>();
        int countMinus = 0;
        for (int  i = 0 ; i<this.jjtGetNumChildren(); i++) {

            ArrayList<String> currArray = jjtGetChild(i).reduce();

            for (int j = 0; j < currArray.size(); j++) {
                String current = currArray.get(j);
                if (this.isStringInt(current)) {
                    val *= Integer.parseInt(current);
                } else {
                    if (current.charAt(0) == '-') {
                        countMinus++; // remind val may be neg
                        current.substring(1);
                    }
                    if (!current.equals(""))
                        identifiers.add(current);
                }
            }
        }
        if(val < 0){
            countMinus ++;
            val *= -1;
        }
        ArrayList<String> ret = new ArrayList<>();
        if (val!=0) {
            if (countMinus%2 == 0)
                ret.add("-");
            ret.add(Integer.toString(val));
            ret.addAll(identifiers);
        }
        else ret.add("0");
        return ret;
    }*/

    @Override
    public ArrayList<String> reduce() {
        ArrayList<String> leftArray =  new ArrayList<>(), rightArray  =  new ArrayList<>(), returnArray  =  new ArrayList<>();
        boolean isLeftString = false, isLeftExpr = false,isRightExpr = false, isRightString = false;
        int leftValue = 0, rightValue = 0;

        if(this.jjtGetNumChildren() == 1){ // bubble up
           ASTMultExpr tempNode = (ASTMultExpr)jjtGetChild(0);
           return tempNode.reduce();
        }

        ASTMultExpr tempNode = (ASTMultExpr)jjtGetChild(0);
        leftArray =  tempNode.reduce();
        tempNode = (ASTMultExpr)jjtGetChild(1);
        rightArray = tempNode.reduce();

        if(leftArray.size() == 1) {// int or string
            if(!this.isStringInt(leftArray.get(0))){
                leftValue =  Integer.parseInt(leftArray.get(0));
            }
            else isLeftString = true;
        }else isLeftExpr = true;

        if(rightArray.size() == 1) {// int or string
            if(!this.isStringInt(rightArray.get(0))){
                rightValue =  Integer.parseInt(rightArray.get(0));
            }
            else isRightString = true;
        } else isRightExpr = true;


        if(!isLeftExpr && !isLeftString){
            if(!isRightExpr&&!isRightString){ // both are values
                if(m_ops.get(1).equals("+"))
                    returnArray.add(Integer.toString(rightValue + leftValue));
                else returnArray.add(Integer.toString(leftValue - rightValue));

            }else if( !isRightExpr) {//is a string value

            }


        }






return returnArray;




    }

    // PLB
  private Vector<String> m_ops = new Vector<>();
  public void addOp(String o) { m_ops.add(o); }
  public Vector getOps() { return m_ops; }
}
