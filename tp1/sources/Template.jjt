options {
	JAVA_UNICODE_ESCAPE=true;
	STATIC=false;					// 1 seul parseur actif a la fois (+ rapide)
	MULTI=true;						// type noeud = f(nom noeud)
	VISITOR=true;					// Cree une methode accept(visiteur)
}

//
// PARSER DEFINITION
//

PARSER_BEGIN(Parser)

package analyzer.ast;

public class Parser
{
	public static ASTProgram ParseTree(java.io.InputStream input) throws ParseException
	{
		Parser c = new Parser(input);
		return c.Program();
	}
}

PARSER_END(Parser)

//
// LEXICAL ANALYSIS
//

// White space

SKIP :
{
	< ( " " | "\t" | "\n" | "\r" )+	>
}

// Comments

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}




// Keywords
TOKEN :
{
	< IF: "if"	> |
	< ELSE: "else" > |
	< WHILE: "while" > |
	< FOR: "for" > |
	< STRING: "string"> |
	< INT: "int"> |
	< FLOAT: "float" > |
	< BOOL: "bool"> |
	< PRINT: "print" > |
	< INPUT: "input" > |
	< IN: "in" >
	// À compléter au besoin
}

// Operators
TOKEN :
{
	<ASSIGN: < EQUAL > | < EQUALR > | < EQUALT > > |
	<COMPARE: < LESS > | < LESSEQUAL > | < GREAT > | <GREATEQUAL > | < DIFF > | < EQUALEQUAL > > |

    < CROOUVRANT: "[" > |
	< CROFERMANT: "]" > |
	< #LESS: "<" > |
	< #LESSEQUAL: "<=" > |
	< #GREAT: ">" > |
	< #GREATEQUAL: ">=" > |
	< #DIFF: "!=" > |
	< #EQUALEQUAL: "==" > |
	//< SPACE: " " > |

	< PLUS: "+" > |
	< MINUS: "-" > |
	< FOIS: "*" > |
	< DIV: "/" > |


	< #EQUAL: "=" > |
	< LPAREN: "(" > |
	< RPAREN: ")" > |
	< LACC: "{" > |
	< RACC: "}" > |
	< COLON: ":" > |
	< SEMICOLON: ";" > |
	< COMMA: "," > |
	< PIPE: "|"> |
	< SHARP: "#"> |
	< TILD: "~"> |


	< #EQUALR: "=." > |
	< #EQUALT: "=*" > |
	//Reel
	< PLUSR: "+." > |
    < MINUSR: "-." > |
   	< FOISR: "*." > |
   	< DIVR: "/." >


	// À compléter au besoin
}


// Identifiers and numbers
TOKEN :
{
	< IDENTIFIER: <LETTER> ( <LETTER> | <DIGIT> )* > |
	< #LETTER: ["a"-"z","A"-"Z","_"] > |
	< #DIGIT: ["0"-"9"] > |
	< INTEGER: ["1"-"9"] (["0"-"9"])* | "0" > |
	// // Caution! Allows numbers such as "0000.23"
	< REAL: (<INTEGER>)+ "." (["0"-"9"])+ (<EXPONENT>)? |
			  (<INTEGER>)+ <EXPONENT> > |
	< #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
	//<ANY:(<IDENTIFIER>|<INTEGER>|<REAL>)>
	//<TABLE: (<CROOUVRANT>) + <ANY> (<COMMA> <SPACE><ANY>)* (<CROFERMANT>)>

}



//
// SYNTAX ANALYSIS
//

ASTProgram Program() : { }
{
	Block() <EOF> { return jjtThis;  }
}

void Block() : { }
{
	 ( Stmt() )*
}

void Stmt() : { }
{

	AssignStmt() <SEMICOLON>
}

void AssignStmt() : { Token t;}
{
	(
            Identifier() <ASSIGN>

    	) (Expr() | TableExpr())
}

void Expr() : {}
{
    LOOKAHEAD(2)IntExpr() | RealExpr()
}

// Support expressions entiers

void IntExpr() : {}
{
    IntAddExpr()
}

void IntAddExpr() : { Token t;}
{
    IntMultExpr() (LOOKAHEAD(2)
        (t = <PLUS> | t = <MINUS>) IntMultExpr()
    )*
}

void IntMultExpr() : { Token t;}
{
    IntNegExpr() (
        (t = <FOIS> | t = <DIV> ) IntNegExpr()

    )*
}


void IntNegExpr() : {}
{
	(
	    <MINUS> IntBasicExpr()
	) |
	IntBasicExpr()
}

void IntBasicExpr() : {}
{
	LOOKAHEAD(2) Identifier()|
	IntValue() |
	LOOKAHEAD(2)<LPAREN> IntExpr() <RPAREN>

}


// Support expressions réels (b)

void RealExpr() : {}
{
    RealAddExpr()
}

void RealAddExpr() : { Token t;}
{
    RealMultExpr() (LOOKAHEAD(2)
        (t = <PLUSR> | t = <MINUSR>) RealMultExpr()
    )*
}

void RealMultExpr() : { Token t;}
{
    RealNegExpr() (
        (t = <FOISR> | t = <DIVR> ) RealNegExpr()

    )*
}


void RealNegExpr() : {}
{
	(
	    <MINUSR> RealBasicExpr()
	) |
	RealBasicExpr()
}

void RealBasicExpr() : {}
{
	LOOKAHEAD(2) Identifier()|
	RealValue() |
	LOOKAHEAD(2)<LPAREN> RealExpr() <RPAREN>

}

/////////////////////////////////////////////////////////////////////////////////////////////////
void TableExpr() : {}
{
//RealMultExpr() (LOOKAHEAD(2)
//          (t = <PLUSR> | t = <MINUSR>) RealMultExpr()
//      )*

    TableConcatExpr()
}

void TableConcatExpr() : { Token t;}
{

    TableRepetitionExpr() (
        t = <PIPE>  TableRepetitionExpr()
    )*
}

void TableRepetitionExpr() : { Token t;}
{

    TableInversionExpression() (
        t = <SHARP> TableInversionExpression()
    )*
}


void TableInversionExpression() : {} //was neg
{

	(<TILD> TableBasicExpression()) | TableBasicExpression()
}

void TableBasicExpression() : {}
{
	<CROOUVRANT> Expr() (<COMMA>Expr())*  <CROFERMANT>

}


//////////////////////////////////////////////////////////////////////////////////////////////////
void Identifier() : { Token t;}
{
	t = <IDENTIFIER> {jjtThis.setValue(t.image);}
}

void IntValue() : { Token t;}
{
	t = <INTEGER> {jjtThis.setValue(Integer.parseInt(t.image));}
}


void RealValue() : { Token t;}
{
	t = <REAL> {jjtThis.setValue(Double.parseDouble(t.image));}
}
