/* Generated By:JJTree&JavaCC: Do not edit this line. ParserConstants.java */
package analyzer.ast;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 5;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 6;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 7;
  /** RegularExpression Id. */
  int IF = 9;
  /** RegularExpression Id. */
  int ELSE = 10;
  /** RegularExpression Id. */
  int WHILE = 11;
  /** RegularExpression Id. */
  int FOR = 12;
  /** RegularExpression Id. */
  int DO = 13;
  /** RegularExpression Id. */
  int STRING = 14;
  /** RegularExpression Id. */
  int INT = 15;
  /** RegularExpression Id. */
  int FLOAT = 16;
  /** RegularExpression Id. */
  int BOOL = 17;
  /** RegularExpression Id. */
  int PRINT = 18;
  /** RegularExpression Id. */
  int INPUT = 19;
  /** RegularExpression Id. */
  int IN = 20;
  /** RegularExpression Id. */
  int ASSIGN = 21;
  /** RegularExpression Id. */
  int ASSIGNR = 22;
  /** RegularExpression Id. */
  int ASSIGNT = 23;
  /** RegularExpression Id. */
  int COMPARE = 24;
  /** RegularExpression Id. */
  int CROOUVRANT = 25;
  /** RegularExpression Id. */
  int CROFERMANT = 26;
  /** RegularExpression Id. */
  int LESS = 27;
  /** RegularExpression Id. */
  int LESSEQUAL = 28;
  /** RegularExpression Id. */
  int GREAT = 29;
  /** RegularExpression Id. */
  int GREATEQUAL = 30;
  /** RegularExpression Id. */
  int DIFF = 31;
  /** RegularExpression Id. */
  int EQUALEQUAL = 32;
  /** RegularExpression Id. */
  int PLUS = 33;
  /** RegularExpression Id. */
  int MINUS = 34;
  /** RegularExpression Id. */
  int FOIS = 35;
  /** RegularExpression Id. */
  int DIV = 36;
  /** RegularExpression Id. */
  int EQUAL = 37;
  /** RegularExpression Id. */
  int LPAREN = 38;
  /** RegularExpression Id. */
  int RPAREN = 39;
  /** RegularExpression Id. */
  int LACC = 40;
  /** RegularExpression Id. */
  int RACC = 41;
  /** RegularExpression Id. */
  int COLON = 42;
  /** RegularExpression Id. */
  int SEMICOLON = 43;
  /** RegularExpression Id. */
  int COMMA = 44;
  /** RegularExpression Id. */
  int PIPE = 45;
  /** RegularExpression Id. */
  int SHARP = 46;
  /** RegularExpression Id. */
  int TILD = 47;
  /** RegularExpression Id. */
  int EQUALR = 48;
  /** RegularExpression Id. */
  int EQUALT = 49;
  /** RegularExpression Id. */
  int PLUSR = 50;
  /** RegularExpression Id. */
  int MINUSR = 51;
  /** RegularExpression Id. */
  int FOISR = 52;
  /** RegularExpression Id. */
  int DIVR = 53;
  /** RegularExpression Id. */
  int IDENTIFIER = 54;
  /** RegularExpression Id. */
  int LETTER = 55;
  /** RegularExpression Id. */
  int DIGIT = 56;
  /** RegularExpression Id. */
  int INTEGER = 57;
  /** RegularExpression Id. */
  int REAL = 58;
  /** RegularExpression Id. */
  int EXPONENT = 59;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT = 1;
  /** Lexical state. */
  int IN_FORMAL_COMMENT = 2;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 3;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<token of kind 1>",
    "\"//\"",
    "<token of kind 3>",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 8>",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "\"for\"",
    "\"do\"",
    "\"string\"",
    "\"int\"",
    "\"float\"",
    "\"bool\"",
    "\"print\"",
    "\"input\"",
    "\"in\"",
    "<ASSIGN>",
    "<ASSIGNR>",
    "<ASSIGNT>",
    "<COMPARE>",
    "\"[\"",
    "\"]\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"!=\"",
    "\"==\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"=\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\":\"",
    "\";\"",
    "\",\"",
    "\"|\"",
    "\"#\"",
    "\"~\"",
    "\"=.\"",
    "\"=*\"",
    "\"+.\"",
    "\"-.\"",
    "\"*.\"",
    "\"/.\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "<INTEGER>",
    "<REAL>",
    "<EXPONENT>",
  };

}
